use crate::client::{Client, ParamType};
use std::collections::HashMap;
use crate::services::{{spec.title | caseUcfirst}}Exception;

#[derive(Clone)]
pub struct {{ service.name | caseUcfirst }} {
  client: Client
}

impl {{ service.name | caseUcfirst }} {  
    pub fn new(client: &Client) -> Self {
        Self {
            client: client.clone()
        }
    }
{% for method in service.methods %}

{% if method.description %}
{{ method.description|dartComment }}
{% endif %}
    pub fn {{ method.name | caseSnake }}(&self{% if method.parameters.all|length >= 1 %}, {% endif %}{% for parameter in method.parameters.all %}{{ parameter.name | caseSnake | escapeKeyword}}: {% if parameter.required != 1 %}Option<{% endif %}{{ parameter.type | typeName }}{% if parameter.required != 1%}>{% endif %}{% if not loop.last %}, {% endif %}{% endfor %}) -> Result<reqwest::blocking::Response, {{spec.title | caseUcfirst}}Exception> {
        let path = "{{ method.path|replace({'{': '', '}': ""}) }}"{% for parameter in method.parameters.path %}.replace("{{ parameter.name | caseCamel }}", &{{ parameter.name | caseSnake }}){% endfor %};

{% if method.headers %}
        let headers: HashMap<String, String> = [
{% for parameter in method.parameters.header %}
            ("{{ parameter.name }}".to_string(), "{{ parameter.name | caseCamel }}".to_string()),
{% endfor %}
{% for key, header in method.headers %}
            ("{{ key }}".to_string(), "{{ header }}".to_string()),
{% endfor %}
        ].iter().cloned().collect();
{% endif %}
{% for parameter in method.parameters.all %}
{% if parameter.required != 1 %}
{% if parameter.type == 'string' %}

        let {{ parameter.name | caseSnake | escapeKeyword}}:{{ parameter.type | typeName }} = match {{ parameter.name | caseSnake | escapeKeyword}} {
            Some(data) => data,
            None => ""
        };
{% endif %}
{% if parameter.type == 'array' %}

        let {{ parameter.name | caseSnake | escapeKeyword}}:{{ parameter.type | typeName }} = match {{ parameter.name | caseSnake | escapeKeyword}} {
            Some(data) => data,
            None => &[]
        };
{% endif %}
{% endif %}
{% endfor %}

        let params: HashMap<String, ParamType> = [
{% for parameter in method.parameters.query %}
            ("{{ parameter.name }}".to_string(), {% if parameter.type == 'number' %} ParamType::{% if parameter.required != 1 %}{% if parameter.type != 'string' %}Optional{% endif %}{% endif %}Float({% elseif parameter.type == 'integer' %} ParamType::{% if parameter.required != 1 %}Optional{% endif %}Number({% elseif parameter.type == 'string' %}ParamType::String({% elseif parameter.type == 'array' %}ParamType::Array({% elseif parameter.type == 'boolean' %}ParamType::{% if parameter.required != 1 %}Optional{% endif %}Bool({% elseif parameter.type == 'object' %}ParamType::{% if parameter.required != 1 %}Optional{% endif %}Object({% elseif parameter.type == 'file' %}ParamType::{% if parameter.required != 1 %}Optional{% endif %}FilePath({% endif %}{{ parameter.name | caseSnake | escapeKeyword }}{% if parameter.type == 'array' %}.into_iter().map(|x| ParamType::String(x.to_string())).collect(){% endif %}{% if parameter.type == 'string' %}.to_string(){% endif %}{% if parameter.type == 'object' %}.unwrap(){% endif %})),
{% endfor %}
{% for parameter in method.parameters.body %}
            ("{{ parameter.name }}".to_string(), {% if parameter.type == 'number' %} ParamType::{% if parameter.required != 1 %}{% if parameter.type != 'string' %}Optional{% endif %}{% endif %}Float({% elseif parameter.type == 'integer' %} ParamType::{% if parameter.required != 1 %}Optional{% endif %}Number({% elseif parameter.type == 'string' %}ParamType::String({% elseif parameter.type == 'array' %}ParamType::Array({% elseif parameter.type == 'boolean' %}ParamType::{% if parameter.required != 1 %}Optional{% endif %}Bool({% elseif parameter.type == 'object' %}ParamType::{% if parameter.required != 1 %}Optional{% endif %}Object({% elseif parameter.type == 'file' %}ParamType::{% if parameter.required != 1 %}Optional{% endif %}FilePath({% endif %}{{ parameter.name | caseSnake | escapeKeyword }}{% if parameter.type == 'array' %}.into_iter().map(|x| ParamType::String(x.to_string())).collect(){% endif %}{% if parameter.type == 'string' %}.to_string(){% endif %}{% if parameter.type == 'object' %}.unwrap(){% endif %})),
{% endfor %}
        ].iter().cloned().collect();

        return self.client.clone().call("{{ method.method | caseUpper }}", &path, {% if method.headers %}Some(headers){% else %}None{% endif %}, Some(params) );
    }
{% endfor %}
}
