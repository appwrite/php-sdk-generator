import 'package:dio/dio.dart';
import 'package:dio_cookie_manager/dio_cookie_manager.dart';
import 'package:cookie_jar/cookie_jar.dart';

class Client {
    Client({
        this.selfSigned = false,
        String endPoint = '{{spec.endpoint}}',
    }) : http = Dio(),
         _endPoint = endPoint,
         headers = {} {
        headers.addAll({
            'content-type': 'application/json',
            'x-sdk-version': '{{spec.title | caseDash}}:{{ language.name | caseLower }}:{{ sdk.version }}',
        });

        http.options.baseUrl = endPoint;
        http.options.validateStatus = (status) => status != 404;
        http.interceptors.add(CookieManager(CookieJar()));
    }

    String _endPoint;
    String get endPoint => _endPoint;

    final Map<String, String> headers;
    bool selfSigned;
    final Dio http;

{% for header in spec.global.headers %}

{% if header.description %}
     /// {{header.description}}
{% endif %}
    Client set{{header.key | caseUcfirst}}(value) {
        addHeader('{{header.name}}', value);

        return this;
    }

{% endfor %}
    Client setSelfSigned({bool status = true}) {
        selfSigned = status;

        return this;
    }

    Client setEndpoint(String endPoint)
    {
        _endPoint = endPoint;
        http.options.baseUrl = this.endPoint;
        return this;
    }

    Client addHeader(String key, String value) {
        headers[key.toLowerCase()] = value.toLowerCase();
        
        return this;
    }

    Future<Response<T>> call<T>(String method, {String path = '', Map<String, String> headers = const <String, String>{}, Map<String, String> params = const <String, String>{}}) {
        if(this.selfSigned) { 
            // Allow self signed requests
        }

        final reqPath = path;
        final isGet = method.toUpperCase() == 'GET';

        // Origin is hardcoded for testing
        final options = Options(
            headers: <String, dynamic>{...this.headers, ...headers, 'Origin': 'http://localhost'},
            method: method.toUpperCase(),
        );

        if (isGet) {
            path += '?';
            params.forEach((k, v) {
                path += '$k=$v&';
            });
        }

        if (!isGet)
            return http.request(reqPath, data: params, options: options);
        else
            return http.request(reqPath, options: options);
    }
}