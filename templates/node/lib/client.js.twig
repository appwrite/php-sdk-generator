const URL = require('url').URL;
const fetch = require('node-fetch');
const urljoin = require('urljoin');
const FormData = require('form-data');

class Client {
    
    constructor() {
        this.endpoint = '{{spec.endpoint}}';
        this.headers = {
            'content-type': '',
            'x-sdk-version': '{{spec.title | caseDash}}:{{ language.name | caseLower }}:{{ sdk.version }}',
        };
        this.selfSigned = false;
    }

{% for header in spec.global.headers %}
    /**
     * Set {{header.key | caseUcfirst}}
     *
{% if header.description %}
     * {{header.description}}
     *
{% endif %}
     * @param string value
     *
     * @return self
     */
    set{{header.key | caseUcfirst}}(value) {
        this.addHeader('{{header.name}}', value);

        return this;
    }

{% endfor %}
    /***
     * @param bool status
     * @return this
     */
    setSelfSigned(status = true) {
        this.selfSigned = status;

        return this;
    }

    /***
     * @param endpoint
     * @return this
     */
    setEndpoint(endpoint)
    {
        this.endpoint = endpoint;

        return this;
    }

    /**
     * @param key string
     * @param value string
     */
    addHeader(key, value) {
        this.headers[key.toLowerCase()] = value.toLowerCase();
        
        return this;
    }
      
    async call(method, path = '', headers = {}, params = {}) {
        if(this.selfSigned) { // Allow self signed requests
            process.env["NODE_TLS_REJECT_UNAUTHORIZED"] = 0;
        }

        const contentType = headers['content-type'].toLowerCase();
        const uri = urljoin(this.endpoint, path);
        const json = contentType.indexOf('application/json') === 1;
        const formData = contentType.indexOf('multipart/form-data') === 1;

        let body;
        if (json) {
            body = JSON.stringify(params);
        } else if (formData) {
            const form = new FormData();
            for (let key in params) {
                body.append(key, params[key]);
            };
        } else {  // query string
            const qs = new URLSearchParams();
            for (let key in params) {
                qs.append(key, params[key]);
            };
            body = qs;
        }

        const options = {
            method: method.toUpperCase(),
            headers: Object.assign(this.headers, headers),
            body: body,
        };

        try {
            let response = await fetch(uri, options);
            
            if(formData) {
                response = await response.json();
            }
        } catch (error) {
            throw error;
        }

        return response;
    }
}

module.exports = Client;